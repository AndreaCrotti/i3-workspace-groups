#!/usr/bin/env python3
# pylint: disable=invalid-name
# Based on:
# https://github.com/maximbaz/dotfiles/blob/master/bin/i3-autoname-workspaces

import argparse
import logging
import logging.handlers
import os.path
import re

import i3ipc

from i3wsgroups import i3_workspace_groups

WINDOW_CLASS_REGEX_TO_ICON = {
    'kitty': '',
    'Termite': '',
    'URxvt': '',
    'URxvtc': '',
    'Chromium': '',
    'Chrome': '',
    'Firefox': '',
    'copyq': '',
    'Ranger': '',
    'Rofi': '',
    'Pqiv': '',
    'Pinta': '',
    '[Mm]pv': '',
    '[Vv]lc': '嗢',
    '[Ll]ibreoffice-writer': '',
    '[Ll]ibreoffice-calc': '',
    'Peek': '',
    'ipython': '',
    'python': '',
    'jupyter-qtconsole': '',
    'Gvim': '',
    'settings': '',
    'slack': '聆',
    'Zathura': '',
    'Telegram': '',
    'Pavucontrol': '墳',
}

WINDOW_CLASS_REGEX_TO_ICON = {
    re.compile(r): icon for r, icon in WINDOW_CLASS_REGEX_TO_ICON.items()
}

WINDOW_INSTANCE_REGEX_TO_ICON = {
    'trello': '',
    'whatsapp': '',
    'gmail': '',
    '[gn]vim': '',
    'file-manager': '',
    'calendar.google.com': '',
    'google drive': '',
    'ticktick': '',
}

WINDOW_INSTANCE_REGEX_TO_ICON = {
    re.compile(r): icon for r, icon in WINDOW_INSTANCE_REGEX_TO_ICON.items()
}

# Other relevant glyphs:
#   
#            樓  
#         
#          墳 奄 奔 婢
#        
#      
#  
#       

DEFAULT_ICON = ''

logger = i3_workspace_groups.logger


def icon_for_window(window):
    for regex, icon in WINDOW_INSTANCE_REGEX_TO_ICON.items():
        if regex.match(window.window_instance):
            return icon
    for regex, icon in WINDOW_CLASS_REGEX_TO_ICON.items():
        if regex.match(window.window_class):
            return icon
    logger.info(
        'No icon specified for window with window class: "%s", instance: '
        '"%s", name: "%s"', window.window_class, window.window_instance,
        window.name)
    return DEFAULT_ICON


def rename_workspaces(i3_connection):
    controller = i3_workspace_groups.WorkspaceGroupsController(
        i3_connection, group_context=None, dry_run=False)
    # Organize the workspaces to make sure their names are formatted properly.
    group_to_workspaces = i3_workspace_groups.get_group_to_workspaces(
        controller.get_monitor_workspaces())
    controller.organize_workspace_groups(group_to_workspaces)
    for workspace in controller.get_tree().workspaces():
        parsed_name = i3_workspace_groups.parse_workspace_name(workspace.name)
        parsed_name['dynamic_name'] = ' '.join(
            [icon_for_window(w) for w in workspace.leaves()])
        new_global_name = i3_workspace_groups.create_workspace_name(
            **parsed_name)
        rename_cmd = 'rename workspace "{}" to "{}"'.format(
            workspace.name, new_global_name)
        logger.info('Sending i3 command: %s', rename_cmd)
        i3_connection.command(rename_cmd)


def window_event_handler(i3_connection, event):
    if event.change in ['new', 'close', 'move']:
        rename_workspaces(i3_connection)


def main():
    parser = argparse.ArgumentParser(
        description='Automatically name i3 workspaces according to the '
        'running apps.')
    parser.add_argument(
        '--log-level',
        choices=('debug', 'info', 'warning', 'error', 'critical'),
        default='warning',
        help='Logging level for stderr and syslog.')
    args = parser.parse_args()
    i3_workspace_groups.init_logger(os.path.basename(__file__))
    logger.setLevel(getattr(logging, args.log_level.upper(), None))
    i3_connection = i3ipc.Connection()
    i3_connection.on('window', window_event_handler)
    rename_workspaces(i3_connection)
    i3_connection.main()


if __name__ == '__main__':
    main()
