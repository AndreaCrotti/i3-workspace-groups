#!/usr/bin/env python3
# pylint: disable=invalid-name
# Based on:
# https://github.com/maximbaz/dotfiles/blob/master/bin/i3-autoname-workspaces

import argparse
import logging
import logging.handlers

import i3ipc

from i3wsgroups import i3_workspace_groups

_LOG_FMT = '%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s'

WINDOW_INSTANCE_TO_ICON = {
    'kitty': '',
    'termite': '',
    'urxvt': '',
    'urxvtc': '',
    'chromium': '',
    'chrome': '',
    'firefox': '',
    'copyq': '',
    'ranger': '',
    'rofi': '',
    'pqiv': '',
    'pinta': '',
    'mpv': '',
    'vlc': '',
    'libreoffice-writer': '',
    'libreoffice-calc': '',
    'peek': '',
    'ipython': '',
    'python': '',
    'vim': '',
    'nvim': '',
    'gvim': '',
    # 'emacs': '',
    'google drive': '',
    'calendar': '',
    'settings': '',
    'slack': '聆',
    'zathura': '',
    'chat': '',
    'trello': '',
    'telegram': '',
    'whatsapp': '',
    'web.whatsapp.com': '',
    'gmail': '',
    'gmail.com': '',
}

# Other possibly useful icons:
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 

DEFAULT_ICON = ''

_logger = logging.getLogger(__name__)


def _init_logger(logger: logging.Logger):
    syslog_handler = logging.handlers.SysLogHandler(address='/dev/log')
    stdout_handler = logging.StreamHandler()
    stdout_formatter = logging.Formatter(_LOG_FMT)
    stdout_handler.setFormatter(stdout_formatter)
    syslog_formatter = logging.Formatter('i3-autoname-workspaces: ' + _LOG_FMT)
    syslog_formatter.ident = 'i3-autoname-workspaces'
    syslog_handler.setFormatter(syslog_formatter)
    logger.addHandler(syslog_handler)
    logger.addHandler(stdout_handler)


def icon_for_window(window):
    if not window.window_instance:
        _logger.warning('Window with id %s has no window instance',
                        window.window_instance)
        return DEFAULT_ICON
    if window.window_instance not in WINDOW_INSTANCE_TO_ICON:
        _logger.info(
            'No icon available for window with window class: "%s", instance: '
            '"%s", name: "%s"', window.window_class, window.window_instance,
            window.name)
        return DEFAULT_ICON
    return WINDOW_INSTANCE_TO_ICON[window.window_instance]


def rename_workspaces(i3_connection):
    for workspace in i3_connection.get_tree().workspaces():
        parsed_name = i3_workspace_groups.parse_workspace_name(workspace.name)
        parsed_name['local_name'] = ' '.join(
            [icon_for_window(w) for w in workspace.leaves()])
        new_global_name = i3_workspace_groups.create_workspace_name(
            **parsed_name)
        rename_cmd = 'rename workspace "{}" to "{}"'.format(
            workspace.name, new_global_name)
        _logger.info('Sending i3 command: %s', rename_cmd)
        i3_connection.command(rename_cmd)


def window_event_handler(i3_connection, event):
    if event.change in ['new', 'close', 'move']:
        rename_workspaces(i3_connection)


def main():
    parser = argparse.ArgumentParser(
        description='Automatically name i3 workspaces according to the '
        'running apps.')
    parser.add_argument(
        '--log-level',
        choices=('debug', 'info', 'warning', 'error', 'critical'),
        default='warning',
        help='Logging level for stderr and syslog.')
    args = parser.parse_args()
    _init_logger(_logger)
    _logger.setLevel(getattr(logging, args.log_level.upper(), None))
    i3_connection = i3ipc.Connection()
    i3_connection.on('window', window_event_handler)
    rename_workspaces(i3_connection)
    i3_connection.main()


if __name__ == '__main__':
    main()
