#!/usr/bin/env python3
# pylint: disable=invalid-name
# Inspired by:
# https://github.com/maximbaz/dotfiles/blob/master/bin/i3-autoname-workspaces

import argparse
import logging
import logging.handlers
import os.path
import re

import i3ipc

from i3wsgroups import i3_workspace_groups
from i3wsgroups import icons

logger = i3_workspace_groups.logger


def rename_workspaces(i3_connection):
    controller = i3_workspace_groups.WorkspaceGroupsController(
        i3_connection, group_context=None, dry_run=False)
    # Organize the workspaces to make sure their names are formatted properly.
    group_to_workspaces = i3_workspace_groups.get_group_to_workspaces(
        controller.get_monitor_workspaces())
    if not group_to_workspaces:
        return
    controller.organize_workspace_groups(group_to_workspaces)
    # Show icons for the active group workspaces and the focused workspace, and
    # don't show them for all the others.
    active_workspace_ids = set()
    active_workspace_ids.add(
        controller.get_tree().find_focused().workspace().id)
    for workspace in next(iter(group_to_workspaces.values())):
        active_workspace_ids.add(workspace.id)
    for workspace in controller.get_tree().workspaces():
        parsed_name = i3_workspace_groups.parse_workspace_name(workspace.name)
        dynamic_name = ''
        if workspace.id in active_workspace_ids:
            dynamic_name = icons.get_workspace_icons_representation(workspace)
        parsed_name['dynamic_name'] = dynamic_name
        new_global_name = i3_workspace_groups.create_workspace_name(
            **parsed_name)
        rename_cmd = 'rename workspace "{}" to "{}"'.format(
            workspace.name, new_global_name)
        logger.info('Sending i3 command: %s', rename_cmd)
        i3_connection.command(rename_cmd)


def event_handler(i3_connection, event):
    logger.debug('Got event with change: %s', event.change)
    if event.change in ['new', 'close', 'move', 'focus']:
        rename_workspaces(i3_connection)


def main():
    parser = argparse.ArgumentParser(
        description='Automatically name i3 workspaces according to the '
        'running apps.')
    parser.add_argument(
        '--log-level',
        choices=('debug', 'info', 'warning', 'error', 'critical'),
        default='warning',
        help='Logging level for stderr and syslog.')
    args = parser.parse_args()
    i3_workspace_groups.init_logger(os.path.basename(__file__))
    logger.setLevel(getattr(logging, args.log_level.upper(), None))
    i3_connection = i3ipc.Connection()
    i3_connection.on('window', event_handler)
    i3_connection.on('workspace', event_handler)
    rename_workspaces(i3_connection)
    i3_connection.main()


if __name__ == '__main__':
    main()
