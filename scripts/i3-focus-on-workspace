#!/usr/bin/env bash

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail

function command_exists() {
  type "$1" &> /dev/null
}

DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" && pwd)"
TOOL="${DIR}/i3-workspace-groups"
command_exists "${TOOL}" || TOOL="i3-workspace-groups"

mapfile -t workspaces < <("${TOOL}" list-workspaces --fields 'global_name')
mapfile -t displayed_workspaces < <("${TOOL}" list-workspaces \
  --fields 'group,local_number,window_icons,static_name')

MESG='<span alpha="50%">Will focus on the selected workspace</span>'

if selected="$(printf '%s\n' "${displayed_workspaces[@]}" |
  rofi -dmenu -width 30 -p 'Workspace' -mesg "${MESG}")"; then
  for i in "${!displayed_workspaces[@]}"; do
    line="${displayed_workspaces[${i}]}"
    if [[ "${line}" == "${selected}" ]]; then
      i3-msg 'workspace  "'"${workspaces[${i}]}"'"'
      exit
    fi
  done
  # No existing workspace was selected, assume it's a new workspace with a
  # format of "group:local_number".
  group="${selected%%:*}"
  local_number="${selected##*:}"
  "${TOOL}" workspace-number --group-name "${group}" "${local_number}"
else
  exit $?
fi
